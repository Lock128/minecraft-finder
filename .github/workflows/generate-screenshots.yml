name: OLD Generate Android Screenshots

on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: 'Commit message for screenshot updates'
        required: false
        default: 'Update Android screenshots'
  push:
    branches: [ main ]
    paths:
      - 'flutter_app/lib/**'
      - 'flutter_app/integration_test/**'
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  generate-android-screenshots:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.3'
        channel: 'stable'
        cache: true

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        ndk: 26.3.11579264

    - name: Accept Android licenses
      run: yes | sdkmanager --licenses

    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Create Android AVD
      run: |
        echo "üì± Creating Android Virtual Device..."
        
        # Install system image
        echo "üì¶ Installing system image..."
        sdkmanager "system-images;android-34;google_apis;x86_64"
        
        # Accept all licenses
        yes | sdkmanager --licenses
        
        # List available system images
        echo "üìã Available system images:"
        sdkmanager --list | grep "system-images;android-34" || echo "No system images found"
        
        # Create AVD with explicit device profile
        echo "üîß Creating AVD..."
        echo "no" | avdmanager create avd \
          --force \
          --name test_emulator \
          --abi google_apis/x86_64 \
          --package 'system-images;android-34;google_apis;x86_64' \
          --device "pixel_4"
        
        # Verify AVD creation
        echo "‚úÖ Verifying AVD creation..."
        avdmanager list avd
        ls -la ~/.android/avd/ || echo "AVD directory not found"
        
        # Configure AVD
        AVD_PATH="$HOME/.android/avd/test_emulator.avd"
        if [ -d "$AVD_PATH" ]; then
          echo "‚öôÔ∏è Configuring AVD..."
          echo "hw.lcd.density=420" >> "$AVD_PATH/config.ini"
          echo "hw.lcd.width=1080" >> "$AVD_PATH/config.ini"
          echo "hw.lcd.height=1920" >> "$AVD_PATH/config.ini"
          echo "hw.keyboard=yes" >> "$AVD_PATH/config.ini"
          echo "hw.ramSize=2048" >> "$AVD_PATH/config.ini"
          echo "vm.heapSize=256" >> "$AVD_PATH/config.ini"
          echo "hw.gpu.enabled=yes" >> "$AVD_PATH/config.ini"
          echo "hw.gpu.mode=swiftshader_indirect" >> "$AVD_PATH/config.ini"
          echo "disk.dataPartition.size=4096MB" >> "$AVD_PATH/config.ini"
        else
          echo "‚ùå AVD directory not found at $AVD_PATH"
          exit 1
        fi

    - name: Start Android Emulator
      run: |
        echo "üöÄ Starting Android emulator..."
        
        # Start emulator with comprehensive configuration
        $ANDROID_HOME/emulator/emulator \
          -avd test_emulator \
          -no-audio \
          -no-window \
          -gpu swiftshader_indirect \
          -no-snapshot \
          -wipe-data \
          -memory 2048 \
          -partition-size 4096 \
          -verbose &
        
        # Store emulator PID
        EMULATOR_PID=$!
        echo "Emulator PID: $EMULATOR_PID"
        
        # Wait for device with timeout
        echo "‚è≥ Waiting for emulator to boot (timeout: 5 minutes)..."
        timeout 300 adb wait-for-device || {
          echo "‚ùå Timeout waiting for emulator"
          kill $EMULATOR_PID 2>/dev/null || true
          exit 1
        }
        
        # Wait for boot completion
        echo "‚è≥ Waiting for boot completion..."
        timeout 300 adb shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 2; done' || {
          echo "‚ùå Timeout waiting for boot completion"
          kill $EMULATOR_PID 2>/dev/null || true
          exit 1
        }
        
        # Unlock screen
        adb shell input keyevent 82
        
        # Additional wait for stability
        sleep 15
        
        # Verify emulator is working
        echo "‚úÖ Emulator status:"
        adb devices
        adb shell getprop sys.boot_completed
        adb shell getprop ro.build.version.release

    - name: Get Flutter dependencies
      run: |
        cd flutter_app
        flutter pub get

    - name: Create integration test
      run: |
        mkdir -p flutter_app/integration_test
        mkdir -p flutter_app/test_driver
        
        # Create integration test driver
        cat > flutter_app/test_driver/integration_test.dart << 'EOF'
        import 'package:integration_test/integration_test_driver.dart';
        
        Future<void> main() => integrationDriver();
        EOF
        
        # Create screenshot integration test
        cat > flutter_app/integration_test/screenshot_test.dart << 'EOF'
        import 'dart:io';
        import 'package:flutter/material.dart';
        import 'package:flutter_test/flutter_test.dart';
        import 'package:integration_test/integration_test.dart';
        import 'package:minecraft_finder/main.dart' as app;
        
        void main() {
          final binding = IntegrationTestWidgetsFlutterBinding.ensureInitialized();
          
          group('Android Screenshot Tests', () {
            testWidgets('Generate Android screenshots', (WidgetTester tester) async {
              print('üöÄ Starting screenshot generation...');
              
              // Android phone configurations
              final configs = [
                {'name': 'android_phone_1080x1920', 'width': 1080.0, 'height': 1920.0},
                {'name': 'android_phone_1440x2560', 'width': 1440.0, 'height': 2560.0},
                {'name': 'android_phone_1080x2340', 'width': 1080.0, 'height': 2340.0},
              ];
              
              for (final config in configs) {
                await generateScreenshotsForDevice(tester, binding, config);
              }
            });
          });
        }
        
        Future<void> generateScreenshotsForDevice(
          WidgetTester tester,
          IntegrationTestWidgetsFlutterBinding binding,
          Map<String, dynamic> config,
        ) async {
          final deviceName = config['name'] as String;
          final width = config['width'] as double;
          final height = config['height'] as double;
          
          print('üì± Generating screenshots for $deviceName (${width}x$height)');
          
          // Set device size
          await binding.setSurfaceSize(Size(width, height));
          
          // Start the app
          app.main();
          await tester.pumpAndSettle(Duration(seconds: 3));
          
          // Create output directory
          final outputDir = '../screenshots/android/phone/$deviceName';
          await Directory(outputDir).create(recursive: true);
          
          // Take screenshots
          await takeAppScreenshots(tester, binding, outputDir, deviceName);
          
          print('‚úÖ Completed screenshots for $deviceName');
        }
        
        Future<void> takeAppScreenshots(
          WidgetTester tester,
          IntegrationTestWidgetsFlutterBinding binding,
          String outputDir,
          String deviceName,
        ) async {
          // Screenshot 1: Main screen
          await takeScreenshot(binding, '$outputDir/01_main_screen.png');
          await tester.pump(Duration(seconds: 1));
          
          // Screenshot 2: Try to show features
          await showcaseFeatures(tester, binding, outputDir);
          
          // Screenshot 3: Show interaction
          await showcaseInteraction(tester, binding, outputDir);
          
          // Screenshot 4: Show results
          await showcaseResults(tester, binding, outputDir);
          
          // Screenshot 5: Show settings/menu
          await showcaseSettings(tester, binding, outputDir);
        }
        
        Future<void> showcaseFeatures(WidgetTester tester, IntegrationTestWidgetsFlutterBinding binding, String outputDir) async {
          try {
            // Look for tabs
            final tabs = find.byType(Tab);
            if (tabs.evaluate().isNotEmpty && tabs.evaluate().length > 1) {
              await tester.tap(tabs.at(1));
              await tester.pumpAndSettle();
            }
            
            // Look for bottom navigation
            final bottomNavBars = find.byType(BottomNavigationBar);
            if (bottomNavBars.evaluate().isNotEmpty) {
              // Try to tap different nav items
              await tester.tap(bottomNavBars.first);
              await tester.pumpAndSettle();
            }
            
            await takeScreenshot(binding, '$outputDir/02_features.png');
          } catch (e) {
            print('‚ö†Ô∏è Error in showcaseFeatures: $e');
            await takeScreenshot(binding, '$outputDir/02_features.png');
          }
        }
        
        Future<void> showcaseInteraction(WidgetTester tester, IntegrationTestWidgetsFlutterBinding binding, String outputDir) async {
          try {
            // Look for text fields
            final textFields = find.byType(TextField);
            if (textFields.evaluate().isNotEmpty) {
              await tester.enterText(textFields.first, 'Diamond');
              await tester.pumpAndSettle();
            }
            
            // Look for buttons
            final buttons = find.byType(ElevatedButton);
            if (buttons.evaluate().isNotEmpty) {
              await tester.tap(buttons.first);
              await tester.pumpAndSettle();
            }
            
            // Look for FAB
            final fabs = find.byType(FloatingActionButton);
            if (fabs.evaluate().isNotEmpty) {
              await tester.tap(fabs.first);
              await tester.pumpAndSettle();
            }
            
            await takeScreenshot(binding, '$outputDir/03_interaction.png');
          } catch (e) {
            print('‚ö†Ô∏è Error in showcaseInteraction: $e');
            await takeScreenshot(binding, '$outputDir/03_interaction.png');
          }
        }
        
        Future<void> showcaseResults(WidgetTester tester, IntegrationTestWidgetsFlutterBinding binding, String outputDir) async {
          try {
            // Look for search/find buttons
            final searchButtons = find.text('Search').or(find.text('Find')).or(find.text('Generate'));
            if (searchButtons.evaluate().isNotEmpty) {
              await tester.tap(searchButtons.first);
              await tester.pumpAndSettle(Duration(seconds: 2));
            }
            
            await takeScreenshot(binding, '$outputDir/04_results.png');
          } catch (e) {
            print('‚ö†Ô∏è Error in showcaseResults: $e');
            await takeScreenshot(binding, '$outputDir/04_results.png');
          }
        }
        
        Future<void> showcaseSettings(WidgetTester tester, IntegrationTestWidgetsFlutterBinding binding, String outputDir) async {
          try {
            // Look for settings icons
            final settingsIcons = find.byIcon(Icons.settings);
            final menuIcons = find.byIcon(Icons.menu);
            final moreIcons = find.byIcon(Icons.more_vert);
            
            if (settingsIcons.evaluate().isNotEmpty) {
              await tester.tap(settingsIcons.first);
              await tester.pumpAndSettle();
            } else if (menuIcons.evaluate().isNotEmpty) {
              await tester.tap(menuIcons.first);
              await tester.pumpAndSettle();
            } else if (moreIcons.evaluate().isNotEmpty) {
              await tester.tap(moreIcons.first);
              await tester.pumpAndSettle();
            }
            
            await takeScreenshot(binding, '$outputDir/05_settings.png');
          } catch (e) {
            print('‚ö†Ô∏è Error in showcaseSettings: $e');
            await takeScreenshot(binding, '$outputDir/05_settings.png');
          }
        }
        
        Future<void> takeScreenshot(IntegrationTestWidgetsFlutterBinding binding, String path) async {
          try {
            final file = File(path);
            await file.parent.create(recursive: true);
            await binding.takeScreenshot(path);
            print('üì∏ Screenshot saved: $path');
          } catch (e) {
            print('‚ùå Failed to take screenshot $path: $e');
          }
        }
        EOF

    - name: Add integration_test dependency
      run: |
        cd flutter_app
        # Check if integration_test is already in pubspec.yaml
        if ! grep -q "integration_test:" pubspec.yaml; then
          echo "Adding integration_test dependency..."
          # Add integration_test to dev_dependencies
          sed -i '/dev_dependencies:/a\  integration_test:\n    sdk: flutter' pubspec.yaml
          flutter pub get
        fi

    - name: Build Android APK
      run: |
        cd flutter_app
        flutter build apk --debug

    - name: Verify emulator is ready
      run: |
        echo "üîç Final emulator verification..."
        adb devices -l
        adb shell dumpsys window displays
        adb shell wm size
        adb shell wm density

    - name: Run screenshot tests
      run: |
        cd flutter_app
        echo "üß™ Running integration tests to generate screenshots..."
        
        # Set environment variables for better Flutter performance
        export FLUTTER_TEST_TIMEOUT=300
        export PUB_CACHE="$HOME/.pub-cache"
        
        # Run the integration test with retries
        for i in {1..3}; do
          echo "Attempt $i of 3..."
          
          if flutter drive \
            --driver=test_driver/integration_test.dart \
            --target=integration_test/screenshot_test.dart \
            --verbose; then
            echo "‚úÖ Integration test completed successfully on attempt $i"
            break
          else
            echo "‚ö†Ô∏è Integration test failed on attempt $i"
            if [ $i -eq 3 ]; then
              echo "‚ùå All attempts failed, but continuing..."
            else
              echo "üîÑ Retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done
        
        # Check if screenshots were generated
        if [ -d "../screenshots" ]; then
          echo "‚úÖ Screenshots generated successfully!"
          find ../screenshots -name "*.png" -type f | head -10
          echo "Total screenshots: $(find ../screenshots -name "*.png" -type f | wc -l)"
        else
          echo "‚ö†Ô∏è No screenshots directory found, creating fallback screenshots..."
          mkdir -p ../screenshots/android/phone/android_phone_1080x1920
          
          # Create placeholder files to indicate the workflow ran
          echo "Screenshot generation attempted but failed" > ../screenshots/android/phone/android_phone_1080x1920/generation_log.txt
          echo "Timestamp: $(date)" >> ../screenshots/android/phone/android_phone_1080x1920/generation_log.txt
          echo "Emulator status: $(adb devices)" >> ../screenshots/android/phone/android_phone_1080x1920/generation_log.txt
        fi

    - name: Create screenshot summary
      run: |
        echo "# Android Screenshots Generated" > screenshot_summary.md
        echo "" >> screenshot_summary.md
        echo "Generated on: $(date)" >> screenshot_summary.md
        echo "" >> screenshot_summary.md
        
        if [ -d "screenshots" ]; then
          echo "## Generated Screenshots:" >> screenshot_summary.md
          find screenshots -name "*.png" -type f | while read file; do
            echo "- $file" >> screenshot_summary.md
          done
          
          echo "" >> screenshot_summary.md
          echo "## Screenshot Count by Device:" >> screenshot_summary.md
          find screenshots -name "*.png" -type f | cut -d'/' -f1-4 | sort | uniq -c >> screenshot_summary.md
        else
          echo "No screenshots were generated." >> screenshot_summary.md
        fi

    - name: Optimize PNG files
      run: |
        if [ -d "screenshots" ]; then
          echo "üóúÔ∏è Optimizing PNG files..."
          # Install pngquant for optimization
          sudo apt-get update && sudo apt-get install -y pngquant
          
          # Optimize all PNG files
          find screenshots -name "*.png" -type f -exec pngquant --force --ext .png {} \; || echo "PNG optimization completed with warnings"
          
          echo "‚úÖ PNG optimization completed"
        fi

    - name: Commit and push screenshots
      run: |
        # Configure git with proper bot identity
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add screenshots to git
        git add screenshots/ || echo "No screenshots directory to add"
        git add screenshot_summary.md || echo "No summary file to add"
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Commit changes
          COMMIT_MSG="${{ github.event.inputs.commit_message || 'Update Android screenshots [automated]' }}"
          git commit -m "$COMMIT_MSG"
          
          # Push changes with explicit token
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}
          
          echo "‚úÖ Screenshots committed and pushed successfully!"
        fi

    - name: Upload screenshots as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-screenshots
        path: |
          screenshots/
          screenshot_summary.md
        retention-days: 30

    - name: Create release with screenshots
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: screenshots-${{ github.run_number }}
        name: Android Screenshots ${{ github.run_number }}
        body: |
          Automated Android screenshots generated from commit ${{ github.sha }}
          
          Generated on: ${{ steps.date.outputs.date }}
          
          This release contains the latest Android app screenshots for store submission.
        files: |
          screenshots/**/*.png
          screenshot_summary.md
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}