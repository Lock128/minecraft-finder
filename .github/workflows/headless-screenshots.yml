name: Headless Screenshot Generation

on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: 'Commit message for screenshots'
        required: false
        default: 'Generate headless screenshots'

jobs:
  generate-headless-screenshots:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.3'
        channel: 'stable'
        cache: true

    - name: Get Flutter dependencies
      run: |
        cd flutter_app
        flutter pub get

    - name: Add test dependencies
      run: |
        cd flutter_app
        if ! grep -q "integration_test:" pubspec.yaml; then
          echo "Adding integration_test dependency..."
          sed -i '/dev_dependencies:/a\  integration_test:\n    sdk: flutter' pubspec.yaml
          flutter pub get
        fi

    - name: Create headless screenshot test
      run: |
        mkdir -p flutter_app/test
        
        cat > flutter_app/test/screenshot_test.dart << 'EOF'
        import 'dart:io';
        import 'package:flutter/material.dart';
        import 'package:flutter_test/flutter_test.dart';
        import 'package:minecraft_finder/main.dart';
        
        void main() {
          group('Golden File Screenshot Tests', () {
            testWidgets('Generate screenshots using golden files', (WidgetTester tester) async {
              print('🚀 Starting golden file screenshot generation...');
              
              final configs = [
                {'name': 'android_phone_1080x1920', 'width': 1080.0, 'height': 1920.0},
                {'name': 'android_phone_1440x2560', 'width': 1440.0, 'height': 2560.0},
                {'name': 'android_phone_1080x2340', 'width': 1080.0, 'height': 2340.0},
              ];
              
              for (final config in configs) {
                await generateScreenshotsForDevice(tester, config);
              }
              
              print('✅ Golden file screenshot generation completed!');
            });
          });
        }
        
        Future<void> generateScreenshotsForDevice(
          WidgetTester tester,
          Map<String, dynamic> config,
        ) async {
          final deviceName = config['name'] as String;
          final width = config['width'] as double;
          final height = config['height'] as double;
          
          print('📱 Generating screenshots for $deviceName (${width}x$height)');
          
          // Set device size
          tester.binding.window.physicalSizeTestValue = Size(width, height);
          tester.binding.window.devicePixelRatioTestValue = width > 1200 ? 3.0 : 2.0;
          
          // Create output directory
          final outputDir = Directory('../screenshots/android/phone/$deviceName');
          await outputDir.create(recursive: true);
          
          // Build the app
          await tester.pumpWidget(const MinecraftOreFinderApp());
          await tester.pumpAndSettle(Duration(seconds: 3));
          
          // Take main screenshot using golden file approach
          await expectLater(
            find.byType(MaterialApp),
            matchesGoldenFile('${outputDir.path}/01_main_screen.png'),
          );
          
          // Try to interact and take more screenshots
          await interactAndScreenshot(tester, outputDir.path);
          
          print('✅ Completed screenshots for $deviceName');
        }
        
        Future<void> interactAndScreenshot(WidgetTester tester, String outputPath) async {
          try {
            // Screenshot 2: Try to navigate to different tab
            final tabs = find.byType(Tab);
            if (tabs.evaluate().length > 1) {
              await tester.tap(tabs.at(1));
              await tester.pumpAndSettle();
              await expectLater(
                find.byType(MaterialApp),
                matchesGoldenFile('$outputPath/02_results_tab.png'),
              );
            }
            
            // Screenshot 3: Try to navigate to guide tab
            if (tabs.evaluate().length > 2) {
              await tester.tap(tabs.at(2));
              await tester.pumpAndSettle();
              await expectLater(
                find.byType(MaterialApp),
                matchesGoldenFile('$outputPath/03_guide_tab.png'),
              );
            }
            
            // Screenshot 4: Go back to search tab and interact
            if (tabs.evaluate().isNotEmpty) {
              await tester.tap(tabs.first);
              await tester.pumpAndSettle();
              
              // Try to find and interact with text fields
              final textFields = find.byType(TextField);
              if (textFields.evaluate().isNotEmpty) {
                await tester.enterText(textFields.first, '12345');
                await tester.pumpAndSettle();
                await expectLater(
                  find.byType(MaterialApp),
                  matchesGoldenFile('$outputPath/04_search_input.png'),
                );
              }
            }
            
            // Screenshot 5: Try to show theme toggle
            final lightModeButton = find.byIcon(Icons.light_mode);
            final darkModeButton = find.byIcon(Icons.dark_mode);
            
            if (lightModeButton.evaluate().isNotEmpty) {
              await tester.tap(lightModeButton.first);
              await tester.pumpAndSettle();
              await expectLater(
                find.byType(MaterialApp),
                matchesGoldenFile('$outputPath/05_theme_toggle.png'),
              );
            } else if (darkModeButton.evaluate().isNotEmpty) {
              await tester.tap(darkModeButton.first);
              await tester.pumpAndSettle();
              await expectLater(
                find.byType(MaterialApp),
                matchesGoldenFile('$outputPath/05_theme_toggle.png'),
              );
            } else {
              // Just take a final screenshot
              await expectLater(
                find.byType(MaterialApp),
                matchesGoldenFile('$outputPath/05_final_state.png'),
              );
            }
            
          } catch (e) {
            print('⚠️ Error during interaction: $e');
            // Take error state screenshot
            await expectLater(
              find.byType(MaterialApp),
              matchesGoldenFile('$outputPath/error_state.png'),
            );
          }
        }
        EOF

    - name: Run headless screenshot generation
      run: |
        cd flutter_app
        echo "🧪 Running golden file screenshot tests..."
        
        # Set environment for golden file generation
        export FLUTTER_TEST=true
        export UPDATE_GOLDENS=true
        
        # Run the test with golden file update
        flutter test test/screenshot_test.dart --update-goldens --verbose || echo "Test completed with warnings"
        
        echo "📸 Checking generated golden files..."
        
        # Golden files are typically stored in test/goldens/ but our test puts them in screenshots/
        if [ -d "../screenshots" ]; then
          echo "✅ Screenshots directory found!"
          find ../screenshots -name "*.png" -type f | head -20
          echo "Total PNG files: $(find ../screenshots -name "*.png" -type f | wc -l)"
          echo "Total files: $(find ../screenshots -type f | wc -l)"
        else
          echo "⚠️ No screenshots directory found, checking for golden files in test directory..."
          if [ -d "test" ]; then
            find test -name "*.png" -type f | head -10
          fi
        fi
        
        # Also check if golden files were created in the default location
        if [ -d "test/goldens" ]; then
          echo "📁 Found golden files in test/goldens:"
          find test/goldens -name "*.png" -type f | head -10
          
          # Move golden files to screenshots directory
          echo "📦 Moving golden files to screenshots directory..."
          mkdir -p ../screenshots/android/phone
          find test/goldens -name "*.png" -type f -exec cp {} ../screenshots/android/phone/ \;
        fi

    - name: Verify screenshot files
      run: |
        if [ -d "screenshots" ]; then
          echo "📊 Screenshot file sizes:"
          find screenshots -name "*.png" -type f -exec ls -lh {} \; | head -10
          
          echo ""
          echo "📁 Directory structure:"
          find screenshots -type d | sort
          
          echo ""
          echo "📄 All files:"
          find screenshots -type f | sort
        else
          echo "No screenshots directory to verify"
        fi

    - name: Create detailed report
      run: |
        echo "# Headless Screenshot Generation Report" > screenshot_report.md
        echo "" >> screenshot_report.md
        echo "**Generated on:** $(date)" >> screenshot_report.md
        echo "**Method:** Headless Flutter Widget Testing" >> screenshot_report.md
        echo "**Workflow:** Headless Screenshot Generation" >> screenshot_report.md
        echo "" >> screenshot_report.md
        
        if [ -d "screenshots" ]; then
          echo "## ✅ Generated Screenshots:" >> screenshot_report.md
          echo "" >> screenshot_report.md
          find screenshots -name "*.png" -type f | while read file; do
            size=$(ls -lh "$file" | awk '{print $5}')
            echo "- \`$file\` ($size)" >> screenshot_report.md
          done
          
          echo "" >> screenshot_report.md
          echo "**Total PNG screenshots:** $(find screenshots -name "*.png" -type f | wc -l)" >> screenshot_report.md
          echo "**Total files:** $(find screenshots -type f | wc -l)" >> screenshot_report.md
          
          error_files=$(find screenshots -name "*.png" -type f -exec grep -l "Screenshot failed" {} \; 2>/dev/null || true)
          if [ -n "$error_files" ]; then
            echo "" >> screenshot_report.md
            echo "## ⚠️ Files with Errors:" >> screenshot_report.md
            echo "$error_files" | while read file; do
              echo "- \`$file\`" >> screenshot_report.md
            done
          fi
        else
          echo "## ❌ No Screenshots Generated" >> screenshot_report.md
          echo "" >> screenshot_report.md
          echo "The headless screenshot generation failed to create any files." >> screenshot_report.md
        fi

    - name: Commit screenshots
      run: |
        # Configure git with proper identity
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if screenshots directory exists and has content
        if [ -d "screenshots" ] && [ "$(find screenshots -name "*.png" -o -name "*.txt" | wc -l)" -gt 0 ]; then
          echo "📁 Found screenshots to commit"
          git add screenshots/
        else
          echo "⚠️ No screenshots directory or files found"
        fi
        
        # Always add the report if it exists
        if [ -f "screenshot_report.md" ]; then
          git add screenshot_report.md
          echo "📄 Added screenshot report"
        fi
        
        # Check if there are any changes to commit
        if ! git diff --staged --quiet; then
          echo "📝 Committing changes..."
          git commit -m "${{ github.event.inputs.commit_message }}"
          
          # Push with explicit remote and branch
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}
          echo "✅ Screenshots committed and pushed successfully!"
        else
          echo "ℹ️ No changes to commit"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: headless-screenshots
        path: |
          screenshots/
          screenshot_report.md
        retention-days: 7