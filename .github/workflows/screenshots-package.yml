name: Screenshots Package Generation

on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: 'Commit message for screenshots'
        required: false
        default: 'Generate screenshots using screenshots package'

jobs:
  generate-screenshots-package:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.3'
        channel: 'stable'
        cache: true

    - name: Get Flutter dependencies
      run: |
        cd flutter_app
        flutter pub get

    - name: Install screenshots package
      timeout-minutes: 5
      run: |
        echo "📦 Installing screenshots package globally..."
        flutter pub global activate screenshots
        echo "✅ Screenshots package installed"

    - name: Create screenshots configuration
      run: |
        cd flutter_app
        
        # Create screenshots.yaml config file
        cat > screenshots.yaml << 'EOF'
        # Screenshots configuration
        tests:
          - test_driver/screenshots.dart
        staging: /tmp/screenshots
        archive: screenshots
        
        # Device configurations
        devices:
          android:
            iPhone SE:
              frame: true
              orientation: portrait
            iPhone 8:
              frame: true  
              orientation: portrait
            iPhone 8 Plus:
              frame: true
              orientation: portrait
            iPhone 11:
              frame: true
              orientation: portrait
            iPhone 11 Pro Max:
              frame: true
              orientation: portrait
            Pixel 3:
              frame: true
              orientation: portrait
            Pixel 3 XL:
              frame: true
              orientation: portrait
            Nexus 6P:
              frame: true
              orientation: portrait
        EOF
        
        echo "📄 Created screenshots.yaml configuration"

    - name: Create screenshot test driver
      run: |
        cd flutter_app
        mkdir -p test_driver
        
        cat > test_driver/screenshots.dart << 'EOF'
        import 'dart:io';
        import 'package:flutter_driver/flutter_driver.dart';
        import 'package:test/test.dart';

        void main() {
          group('Screenshot Tests', () {
            FlutterDriver? driver;

            setUpAll(() async {
              print('🚀 Starting Flutter driver...');
              driver = await FlutterDriver.connect();
              print('✅ Flutter driver connected');
            });

            tearDownAll(() async {
              if (driver != null) {
                print('🔌 Closing Flutter driver...');
                await driver!.close();
                print('✅ Flutter driver closed');
              }
            });

            test('take screenshots', () async {
              if (driver == null) {
                fail('Driver not initialized');
              }

              print('📸 Starting screenshot capture...');

              // Wait for app to load
              await driver!.waitFor(find.byType('MaterialApp'));
              await Future.delayed(Duration(seconds: 2));

              // Screenshot 1: Main screen
              print('📱 Taking main screen screenshot...');
              await driver!.screenshot();
              await Future.delayed(Duration(seconds: 1));

              // Try to find and tap tabs
              try {
                final tabFinder = find.byType('Tab');
                final tabs = await driver!.getText(tabFinder);
                print('🔍 Found tabs, attempting navigation...');

                // Screenshot 2: Second tab
                await driver!.tap(find.byValueKey('tab_1'));
                await Future.delayed(Duration(seconds: 2));
                await driver!.screenshot();

                // Screenshot 3: Third tab if exists
                try {
                  await driver!.tap(find.byValueKey('tab_2'));
                  await Future.delayed(Duration(seconds: 2));
                  await driver!.screenshot();
                } catch (e) {
                  print('⚠️ Third tab not found: $e');
                }

                // Go back to first tab
                await driver!.tap(find.byValueKey('tab_0'));
                await Future.delayed(Duration(seconds: 1));

              } catch (e) {
                print('⚠️ Tab navigation failed: $e');
              }

              // Try to interact with text fields
              try {
                print('🔤 Looking for text input fields...');
                final textFieldFinder = find.byType('TextField');
                await driver!.tap(textFieldFinder);
                await driver!.enterText('12345');
                await Future.delayed(Duration(seconds: 1));
                await driver!.screenshot();
              } catch (e) {
                print('⚠️ Text field interaction failed: $e');
              }

              // Try to find and tap buttons
              try {
                print('🔘 Looking for buttons...');
                final buttonFinder = find.byType('ElevatedButton');
                await driver!.tap(buttonFinder);
                await Future.delayed(Duration(seconds: 2));
                await driver!.screenshot();
              } catch (e) {
                print('⚠️ Button interaction failed: $e');
              }

              print('✅ Screenshot capture completed');
            });
          });
        }
        EOF
        
        echo "🧪 Created screenshot test driver"

    - name: Create app target for driver
      run: |
        cd flutter_app
        mkdir -p test_driver
        
        cat > test_driver/app.dart << 'EOF'
        import 'package:flutter_driver/driver_extension.dart';
        import 'package:minecraft_finder/main.dart' as app;

        void main() {
          // Enable integration testing
          enableFlutterDriverExtension();
          
          // Start the app
          app.main();
        }
        EOF
        
        echo "🎯 Created app target for driver"

    - name: Generate screenshots
      timeout-minutes: 15
      run: |
        cd flutter_app
        echo "📸 Starting screenshots generation..."
        
        # Set environment variables
        export PATH="$PATH:$HOME/.pub-cache/bin"
        
        # Run screenshots command
        screenshots --verbose || {
          echo "⚠️ Screenshots command failed, trying alternative approach..."
          
          # Alternative: Run flutter driver test directly
          echo "🔄 Trying direct flutter driver approach..."
          flutter drive --target=test_driver/app.dart --driver=test_driver/screenshots.dart --verbose || {
            echo "❌ Both approaches failed, but continuing..."
            
            # Create minimal screenshots directory structure
            mkdir -p screenshots/android
            echo "Screenshot generation failed but workflow continues" > screenshots/android/error.txt
          }
        }
        
        echo "📊 Checking generated files..."
        if [ -d "screenshots" ]; then
          echo "✅ Screenshots directory found!"
          find screenshots -type f | head -20
          echo "Total files: $(find screenshots -type f | wc -l)"
        else
          echo "⚠️ No screenshots directory found"
        fi

    - name: Verify and organize screenshots
      run: |
        cd flutter_app
        
        # Check if screenshots were generated
        if [ -d "screenshots" ]; then
          echo "📁 Moving screenshots to root directory..."
          cp -r screenshots ../screenshots_generated
          
          echo "📊 Screenshot file details:"
          find ../screenshots_generated -name "*.png" -type f -exec ls -lh {} \; | head -10
        else
          echo "📁 Creating placeholder screenshots directory..."
          mkdir -p ../screenshots_generated
          echo "No screenshots were generated by the screenshots package" > ../screenshots_generated/README.txt
        fi
        
        # Also check for any images in staging area
        if [ -d "/tmp/screenshots" ]; then
          echo "📦 Found staging screenshots, copying..."
          cp -r /tmp/screenshots/* ../screenshots_generated/ 2>/dev/null || true
        fi

    - name: Create detailed report
      run: |
        echo "# Screenshots Package Generation Report" > screenshot_report.md
        echo "" >> screenshot_report.md
        echo "**Generated on:** $(date)" >> screenshot_report.md
        echo "**Method:** Flutter Screenshots Package" >> screenshot_report.md
        echo "**Package:** https://pub.dev/packages/screenshots" >> screenshot_report.md
        echo "" >> screenshot_report.md
        
        if [ -d "screenshots_generated" ] && [ "$(find screenshots_generated -name "*.png" -type f | wc -l)" -gt 0 ]; then
          echo "## ✅ Generated Screenshots:" >> screenshot_report.md
          echo "" >> screenshot_report.md
          find screenshots_generated -name "*.png" -type f | while read file; do
            size=$(ls -lh "$file" | awk '{print $5}')
            echo "- \`$file\` ($size)" >> screenshot_report.md
          done
          
          echo "" >> screenshot_report.md
          echo "**Total PNG screenshots:** $(find screenshots_generated -name "*.png" -type f | wc -l)" >> screenshot_report.md
        else
          echo "## ⚠️ Screenshot Generation Issues" >> screenshot_report.md
          echo "" >> screenshot_report.md
          echo "The screenshots package approach encountered issues. This could be due to:" >> screenshot_report.md
          echo "- App compatibility with Flutter Driver" >> screenshot_report.md
          echo "- Missing device configurations" >> screenshot_report.md
          echo "- Test driver setup issues" >> screenshot_report.md
          echo "" >> screenshot_report.md
          
          if [ -d "screenshots_generated" ]; then
            echo "**Files found:**" >> screenshot_report.md
            find screenshots_generated -type f | while read file; do
              echo "- \`$file\`" >> screenshot_report.md
            done
          fi
        fi

    - name: Commit screenshots
      run: |
        # Configure git
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add screenshots if they exist
        if [ -d "screenshots_generated" ]; then
          echo "📁 Adding screenshots to git..."
          git add screenshots_generated/
        fi
        
        # Add report
        if [ -f "screenshot_report.md" ]; then
          git add screenshot_report.md
        fi
        
        # Commit if there are changes
        if ! git diff --staged --quiet; then
          echo "📝 Committing changes..."
          git commit -m "${{ github.event.inputs.commit_message }}"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}
          echo "✅ Screenshots committed successfully!"
        else
          echo "ℹ️ No changes to commit"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: screenshots-package-output
        path: |
          screenshots_generated/
          screenshot_report.md
          flutter_app/screenshots.yaml
        retention-days: 7