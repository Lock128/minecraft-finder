name: Integration Test Screenshots

on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: 'Commit message for screenshots'
        required: false
        default: 'Generate screenshots using integration_test'

jobs:
  generate-integration-screenshots:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.3'
        channel: 'stable'
        cache: true

    - name: Get Flutter dependencies
      run: |
        cd flutter_app
        flutter pub get

    - name: Add integration_test dependency
      run: |
        cd flutter_app
        if ! grep -q "integration_test:" pubspec.yaml; then
          echo "üì¶ Adding integration_test dependency..."
          sed -i '/dev_dependencies:/a\  integration_test:\n    sdk: flutter' pubspec.yaml
          flutter pub get
        else
          echo "‚úÖ integration_test dependency already exists"
        fi

    - name: Create integration test for screenshots
      run: |
        cd flutter_app
        mkdir -p integration_test
        
        cat > integration_test/screenshot_test.dart << 'EOF'
        import 'dart:io';
        import 'dart:typed_data';
        import 'package:flutter/material.dart';
        import 'package:flutter/rendering.dart';
        import 'package:flutter/services.dart';
        import 'package:flutter_test/flutter_test.dart';
        import 'package:integration_test/integration_test.dart';
        import 'package:minecraft_finder/main.dart';

        void main() {
          final binding = IntegrationTestWidgetsFlutterBinding.ensureInitialized();
          
          group('Screenshot Integration Tests', () {
            testWidgets('Generate app screenshots', (WidgetTester tester) async {
              print('üöÄ Starting integration test screenshot generation...');
              
              // Device configurations
              final devices = [
                {'name': 'phone_1080x1920', 'width': 1080.0, 'height': 1920.0, 'pixelRatio': 2.0},
                {'name': 'phone_1440x2560', 'width': 1440.0, 'height': 2560.0, 'pixelRatio': 3.0},
                {'name': 'tablet_1200x1920', 'width': 1200.0, 'height': 1920.0, 'pixelRatio': 2.0},
              ];
              
              for (final device in devices) {
                await generateScreenshotsForDevice(tester, binding, device);
              }
              
              print('‚úÖ All screenshots generated successfully!');
            });
          });
        }

        Future<void> generateScreenshotsForDevice(
          WidgetTester tester,
          IntegrationTestWidgetsFlutterBinding binding,
          Map<String, dynamic> device,
        ) async {
          final deviceName = device['name'] as String;
          final width = device['width'] as double;
          final height = device['height'] as double;
          final pixelRatio = device['pixelRatio'] as double;
          
          print('üì± Generating screenshots for $deviceName (${width}x$height)');
          
          // Set device size
          await binding.setSurfaceSize(Size(width, height));
          tester.view.physicalSize = Size(width, height);
          tester.view.devicePixelRatio = pixelRatio;
          
          // Create output directory
          final outputDir = Directory('../screenshots/android/$deviceName');
          await outputDir.create(recursive: true);
          
          // Build and pump the app
          await tester.pumpWidget(const MinecraftOreFinderApp());
          await tester.pumpAndSettle(const Duration(seconds: 3));
          
          // Screenshot 1: Main screen
          print('üì∏ Taking main screen screenshot...');
          await takeScreenshot(tester, '${outputDir.path}/01_main_screen.png');
          
          // Try to interact with the app and take more screenshots
          await interactAndTakeScreenshots(tester, outputDir.path);
          
          print('‚úÖ Completed screenshots for $deviceName');
        }

        Future<void> takeScreenshot(WidgetTester tester, String filePath) async {
          try {
            // Find the root widget
            final rootWidget = find.byType(MaterialApp);
            if (rootWidget.evaluate().isEmpty) {
              print('‚ö†Ô∏è MaterialApp not found, trying alternative approach...');
              // Try to capture the entire screen
              await tester.binding.takeScreenshot(filePath);
              return;
            }
            
            // Get the render object
            final RenderObject renderObject = tester.renderObject(rootWidget);
            final RenderRepaintBoundary boundary = renderObject.findAncestorRenderObjectOfType<RenderRepaintBoundary>()!;
            
            // Capture the image
            final image = await boundary.toImage(pixelRatio: tester.view.devicePixelRatio);
            final ByteData? byteData = await image.toByteData(format: ImageByteFormat.png);
            
            if (byteData != null) {
              final Uint8List pngBytes = byteData.buffer.asUint8List();
              final File file = File(filePath);
              await file.writeAsBytes(pngBytes);
              print('‚úÖ Screenshot saved: $filePath (${pngBytes.length} bytes)');
            } else {
              print('‚ùå Failed to convert image to bytes for $filePath');
            }
          } catch (e) {
            print('‚ö†Ô∏è Screenshot failed for $filePath: $e');
            // Fallback: try the binding method
            try {
              await tester.binding.takeScreenshot(filePath);
              print('‚úÖ Fallback screenshot saved: $filePath');
            } catch (fallbackError) {
              print('‚ùå Fallback screenshot also failed: $fallbackError');
            }
          }
        }

        Future<void> interactAndTakeScreenshots(WidgetTester tester, String outputPath) async {
          try {
            // Screenshot 2: Try to find and tap tabs
            final tabs = find.byType(Tab);
            if (tabs.evaluate().isNotEmpty) {
              print('üîç Found ${tabs.evaluate().length} tabs');
              
              // Tap second tab if exists
              if (tabs.evaluate().length > 1) {
                await tester.tap(tabs.at(1));
                await tester.pumpAndSettle(const Duration(seconds: 2));
                await takeScreenshot(tester, '$outputPath/02_second_tab.png');
              }
              
              // Tap third tab if exists
              if (tabs.evaluate().length > 2) {
                await tester.tap(tabs.at(2));
                await tester.pumpAndSettle(const Duration(seconds: 2));
                await takeScreenshot(tester, '$outputPath/03_third_tab.png');
              }
              
              // Go back to first tab
              await tester.tap(tabs.first);
              await tester.pumpAndSettle(const Duration(seconds: 1));
            }
            
            // Screenshot 3: Try to interact with text fields
            final textFields = find.byType(TextField);
            if (textFields.evaluate().isNotEmpty) {
              print('üî§ Found text fields, entering sample data...');
              await tester.enterText(textFields.first, '12345');
              await tester.pumpAndSettle(const Duration(seconds: 1));
              await takeScreenshot(tester, '$outputPath/04_text_input.png');
            }
            
            // Screenshot 4: Try to find and tap buttons
            final elevatedButtons = find.byType(ElevatedButton);
            final textButtons = find.byType(TextButton);
            final iconButtons = find.byType(IconButton);
            
            if (elevatedButtons.evaluate().isNotEmpty) {
              print('üîò Found ElevatedButton, tapping...');
              await tester.tap(elevatedButtons.first);
              await tester.pumpAndSettle(const Duration(seconds: 2));
              await takeScreenshot(tester, '$outputPath/05_button_pressed.png');
            } else if (textButtons.evaluate().isNotEmpty) {
              print('üîò Found TextButton, tapping...');
              await tester.tap(textButtons.first);
              await tester.pumpAndSettle(const Duration(seconds: 2));
              await takeScreenshot(tester, '$outputPath/05_button_pressed.png');
            } else if (iconButtons.evaluate().isNotEmpty) {
              print('üîò Found IconButton, tapping...');
              await tester.tap(iconButtons.first);
              await tester.pumpAndSettle(const Duration(seconds: 2));
              await takeScreenshot(tester, '$outputPath/05_icon_pressed.png');
            }
            
            // Screenshot 5: Try to toggle theme if available
            final themeButtons = find.byIcon(Icons.light_mode).or(find.byIcon(Icons.dark_mode));
            if (themeButtons.evaluate().isNotEmpty) {
              print('üåô Found theme toggle, switching theme...');
              await tester.tap(themeButtons.first);
              await tester.pumpAndSettle(const Duration(seconds: 2));
              await takeScreenshot(tester, '$outputPath/06_theme_toggle.png');
            }
            
          } catch (e) {
            print('‚ö†Ô∏è Error during interaction: $e');
            // Take final state screenshot
            await takeScreenshot(tester, '$outputPath/error_state.png');
          }
        }
        EOF
        
        echo "üß™ Created integration test for screenshots"

    - name: Run integration test screenshots
      timeout-minutes: 15
      run: |
        cd flutter_app
        echo "üì∏ Running integration test for screenshots..."
        
        # Run the integration test
        flutter test integration_test/screenshot_test.dart --verbose || {
          echo "‚ö†Ô∏è Integration test completed with warnings"
        }
        
        echo "üìä Checking generated screenshots..."
        if [ -d "../screenshots" ]; then
          echo "‚úÖ Screenshots directory found!"
          find ../screenshots -name "*.png" -type f | head -20
          echo "Total PNG files: $(find ../screenshots -name "*.png" -type f | wc -l)"
        else
          echo "‚ö†Ô∏è No screenshots directory found"
        fi

    - name: Verify and organize screenshots
      run: |
        # Check if screenshots were generated
        if [ -d "screenshots" ]; then
          echo "üìÅ Screenshots directory found!"
          echo "üìä Screenshot file details:"
          find screenshots -name "*.png" -type f -exec ls -lh {} \; | head -10
          
          echo ""
          echo "üìÅ Directory structure:"
          find screenshots -type d | sort
        else
          echo "‚ö†Ô∏è No screenshots directory found, creating placeholder..."
          mkdir -p screenshots
          echo "No screenshots were generated" > screenshots/README.txt
        fi

    - name: Create detailed report
      run: |
        echo "# Integration Test Screenshots Report" > screenshot_report.md
        echo "" >> screenshot_report.md
        echo "**Generated on:** $(date)" >> screenshot_report.md
        echo "**Method:** Flutter Integration Test + takeScreenshot()" >> screenshot_report.md
        echo "**Framework:** integration_test package" >> screenshot_report.md
        echo "" >> screenshot_report.md
        
        if [ -d "screenshots" ] && [ "$(find screenshots -name "*.png" -type f | wc -l)" -gt 0 ]; then
          echo "## ‚úÖ Generated Screenshots:" >> screenshot_report.md
          echo "" >> screenshot_report.md
          find screenshots -name "*.png" -type f | while read file; do
            size=$(ls -lh "$file" | awk '{print $5}')
            echo "- \`$file\` ($size)" >> screenshot_report.md
          done
          
          echo "" >> screenshot_report.md
          echo "**Total PNG screenshots:** $(find screenshots -name "*.png" -type f | wc -l)" >> screenshot_report.md
          echo "**Total files:** $(find screenshots -type f | wc -l)" >> screenshot_report.md
          
          echo "" >> screenshot_report.md
          echo "## üì± Device Configurations:" >> screenshot_report.md
          echo "- Phone 1080x1920 (2x pixel ratio)" >> screenshot_report.md
          echo "- Phone 1440x2560 (3x pixel ratio)" >> screenshot_report.md
          echo "- Tablet 1200x1920 (2x pixel ratio)" >> screenshot_report.md
        else
          echo "## ‚ö†Ô∏è Screenshot Generation Issues" >> screenshot_report.md
          echo "" >> screenshot_report.md
          echo "The integration test approach encountered issues. This could be due to:" >> screenshot_report.md
          echo "- App widget structure compatibility" >> screenshot_report.md
          echo "- Render boundary issues" >> screenshot_report.md
          echo "- File system permissions" >> screenshot_report.md
          echo "" >> screenshot_report.md
          
          if [ -d "screenshots" ]; then
            echo "**Files found:**" >> screenshot_report.md
            find screenshots -type f | while read file; do
              echo "- \`$file\`" >> screenshot_report.md
            done
          fi
        fi

    - name: Commit screenshots
      run: |
        # Configure git
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add screenshots if they exist
        if [ -d "screenshots" ]; then
          echo "üìÅ Adding screenshots to git..."
          git add screenshots/
        fi
        
        # Add report
        if [ -f "screenshot_report.md" ]; then
          git add screenshot_report.md
        fi
        
        # Commit if there are changes
        if ! git diff --staged --quiet; then
          echo "üìù Committing changes..."
          git commit -m "${{ github.event.inputs.commit_message }}"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}
          echo "‚úÖ Screenshots committed successfully!"
        else
          echo "‚ÑπÔ∏è No changes to commit"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-screenshots
        path: |
          screenshots/
          screenshot_report.md
          flutter_app/integration_test/
        retention-days: 7