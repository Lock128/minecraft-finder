name: Deploy Web Hosting Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'flutter_app/**'
      - 'infrastructure/**'
      - '.github/workflows/deploy-web-hosting.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      skip_build:
        description: 'Skip Flutter build (deploy infrastructure only)'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.32.3'
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

# Security: Restrict permissions to minimum required
permissions:
  contents: read
  id-token: write  # Required for OIDC authentication
  actions: read
  security-events: write
  pull-requests: write  # For PR comments

jobs:
  build-flutter:
    name: Build Flutter Web Application
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_build }}
    timeout-minutes: 15
    
    outputs:
      build-hash: ${{ steps.build-info.outputs.build-hash }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        working-directory: flutter_app
        run: |
          echo "üì¶ Installing Flutter dependencies..."
          flutter pub get
          
      - name: Analyze Flutter code
        working-directory: flutter_app
        run: |
          echo "üîç Analyzing Flutter code..."
          flutter analyze --fatal-infos
          
      - name: Run Flutter tests
        working-directory: flutter_app
        run: |
          echo "üß™ Running Flutter tests..."
          flutter test --coverage --reporter=github
          
      - name: Build Flutter web
        working-directory: flutter_app
        run: |
          echo "üèóÔ∏è Building Flutter web application..."
          flutter build web --release --web-renderer html --base-href /
          
      - name: Generate build info
        id: build-info
        run: |
          BUILD_HASH=$(echo "${{ github.sha }}" | cut -c1-8)
          echo "build-hash=$BUILD_HASH" >> $GITHUB_OUTPUT
          echo "Build hash: $BUILD_HASH"
          
          # Create build info file
          cat > flutter_app/build/web/build-info.json << EOF
          {
            "buildHash": "$BUILD_HASH",
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "gitCommit": "${{ github.sha }}",
            "gitBranch": "${{ github.ref_name }}",
            "buildNumber": "${{ github.run_number }}",
            "environment": "${{ inputs.environment || 'dev' }}"
          }
          EOF
          
      - name: Upload Flutter build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-web-build
          path: flutter_app/build/web/
          retention-days: 7
          compression-level: 6

  deploy-infrastructure:
    name: Deploy CDK Infrastructure
    runs-on: ubuntu-latest
    needs: [build-flutter]
    if: always() && (needs.build-flutter.result == 'success' || inputs.skip_build)
    timeout-minutes: 30
    
    environment: ${{ inputs.environment || 'dev' }}
    
    outputs:
      cloudfront-distribution-id: ${{ steps.deploy-output.outputs.cloudfront-distribution-id }}
      s3-bucket-name: ${{ steps.deploy-output.outputs.s3-bucket-name }}
      cloudfront-domain: ${{ steps.deploy-output.outputs.cloudfront-domain }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use OIDC for secure authentication (preferred method)
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-WebHostingDeploy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          # Mask AWS account ID in logs
          mask-aws-account-id: true
          # Retry configuration for transient failures
          retry-max-attempts: 3
          # Additional security: restrict to specific audience
          audience: sts.amazonaws.com

      - name: Install CDK dependencies
        working-directory: infrastructure
        run: |
          echo "üì¶ Installing CDK dependencies..."
          npm ci
          
      - name: Build CDK application
        working-directory: infrastructure
        run: |
          echo "üèóÔ∏è Building CDK application..."
          npm run build
          
      - name: Run CDK tests
        working-directory: infrastructure
        run: |
          echo "üß™ Running CDK tests..."
          npm test

      - name: Security scanning
        working-directory: infrastructure
        run: |
          echo "üîç Running security scans..."
          
          # Check for known vulnerabilities in dependencies
          npm audit --audit-level=high
          
          # Run CDK security checks
          echo "üîí Running CDK security validation..."
          npx cdk-nag --app "npx ts-node src/app.ts" --context environment=${{ inputs.environment || 'dev' }} || true
          
          # Validate IAM policies (if cdk-iam-floyd is available)
          echo "üîê Validating IAM policies..."
          npm run validate-iam 2>/dev/null || echo "IAM validation skipped (optional)"
          
      - name: Security validation
        working-directory: infrastructure
        run: |
          echo "üîí Running security validation..."
          
          # Validate required security environment variables
          if [ -z "${{ secrets.DOMAIN_NAME }}" ]; then
            echo "‚ùå Error: DOMAIN_NAME secret is required"
            exit 1
          fi
          
          if [ -z "${{ secrets.HOSTED_ZONE_ID }}" ]; then
            echo "‚ùå Error: HOSTED_ZONE_ID secret is required"
            exit 1
          fi
          
          if [ -z "${{ secrets.CROSS_ACCOUNT_ROLE_ARN }}" ]; then
            echo "‚ùå Error: CROSS_ACCOUNT_ROLE_ARN secret is required"
            exit 1
          fi
          
          # Validate domain name format
          if ! echo "${{ secrets.DOMAIN_NAME }}" | grep -E '^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.[a-zA-Z]{2,}$'; then
            echo "‚ùå Error: Invalid domain name format"
            exit 1
          fi
          
          # Production-specific security checks
          if [ "${{ inputs.environment || 'dev' }}" = "prod" ]; then
            echo "üîí Running production security checks..."
            
            # Check for production-specific configurations
            if [ -z "${{ secrets.KMS_KEY_ID }}" ]; then
              echo "‚ö†Ô∏è Warning: KMS_KEY_ID not configured for production"
            fi
            
            # Validate branch for production deployments
            if [ "${{ github.ref_name }}" != "main" ]; then
              echo "‚ùå Error: Production deployments only allowed from main branch"
              exit 1
            fi
          fi
          
          echo "‚úÖ Security validation passed"

      - name: CDK Bootstrap (if needed)
        working-directory: infrastructure
        run: |
          echo "üöÄ Checking CDK bootstrap status..."
          
          # Get AWS account ID securely
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Bootstrap with security-enhanced settings
          npx cdk bootstrap \
            aws://${AWS_ACCOUNT_ID}/${{ env.AWS_REGION }} \
            --toolkit-stack-name CDKToolkit-WebHosting \
            --qualifier webhost \
            --trust-for-lookup ${AWS_ACCOUNT_ID} \
            --cloudformation-execution-policies arn:aws:iam::aws:policy/PowerUserAccess \
            --force || true
          
      - name: CDK Diff
        working-directory: infrastructure
        run: |
          echo "üìã Generating CDK diff..."
          npx cdk diff --context environment=${{ inputs.environment || 'dev' }} || true
          
      - name: Deploy CDK Stack
        id: deploy-cdk
        working-directory: infrastructure
        env:
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}
          CROSS_ACCOUNT_ROLE_ARN: ${{ secrets.CROSS_ACCOUNT_ROLE_ARN }}
        run: |
          echo "üöÄ Deploying CDK stack..."
          
          STACK_NAME="WebHostingStack-${{ inputs.environment || 'dev' }}"
          
          npx cdk deploy $STACK_NAME \
            --context environment=${{ inputs.environment || 'dev' }} \
            --context domainName="${DOMAIN_NAME}" \
            --context hostedZoneId="${HOSTED_ZONE_ID}" \
            --context crossAccountRoleArn="${CROSS_ACCOUNT_ROLE_ARN}" \
            --require-approval never \
            --outputs-file cdk-outputs.json \
            --progress events
            
      - name: Extract deployment outputs
        id: deploy-output
        working-directory: infrastructure
        run: |
          echo "üì§ Extracting deployment outputs..."
          
          if [ -f cdk-outputs.json ]; then
            STACK_NAME="WebHostingStack-${{ inputs.environment || 'dev' }}"
            
            CLOUDFRONT_ID=$(jq -r ".[\"$STACK_NAME\"].CloudFrontDistributionId // empty" cdk-outputs.json)
            S3_BUCKET=$(jq -r ".[\"$STACK_NAME\"].S3BucketName // empty" cdk-outputs.json)
            CLOUDFRONT_DOMAIN=$(jq -r ".[\"$STACK_NAME\"].CloudFrontDomainName // empty" cdk-outputs.json)
            
            echo "cloudfront-distribution-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
            echo "s3-bucket-name=$S3_BUCKET" >> $GITHUB_OUTPUT
            echo "cloudfront-domain=$CLOUDFRONT_DOMAIN" >> $GITHUB_OUTPUT
            
            echo "‚úÖ Deployment outputs:"
            echo "  CloudFront Distribution ID: $CLOUDFRONT_ID"
            echo "  S3 Bucket Name: $S3_BUCKET"
            echo "  CloudFront Domain: $CLOUDFRONT_DOMAIN"
          else
            echo "‚ùå CDK outputs file not found"
            exit 1
          fi
          
      - name: Upload CDK outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs
          path: infrastructure/cdk-outputs.json
          retention-days: 7

  deploy-assets:
    name: Deploy Assets to S3
    runs-on: ubuntu-latest
    needs: [build-flutter, deploy-infrastructure]
    if: always() && needs.build-flutter.result == 'success' && needs.deploy-infrastructure.result == 'success'
    timeout-minutes: 15
    
    environment: ${{ inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use OIDC for secure authentication (preferred method)
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-AssetDeploy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 1800
          # Mask AWS account ID in logs
          mask-aws-account-id: true
          # Retry configuration for transient failures
          retry-max-attempts: 3
          # Additional security: restrict to specific audience
          audience: sts.amazonaws.com

      - name: Download Flutter build artifacts
        uses: actions/download-artifact@v4
        with:
          name: flutter-web-build
          path: flutter_app/build/web/

      - name: Validate assets before upload
        run: |
          echo "üîç Validating assets before upload..."
          
          # Check if build directory exists
          if [ ! -d "flutter_app/build/web" ]; then
            echo "‚ùå Error: Build directory not found"
            exit 1
          fi
          
          # Check for required files
          required_files=("index.html" "main.dart.js" "flutter.js")
          for file in "${required_files[@]}"; do
            if [ ! -f "flutter_app/build/web/$file" ]; then
              echo "‚ùå Error: Required file $file not found"
              exit 1
            fi
          done
          
          # Check file sizes (prevent accidentally uploading huge files)
          find flutter_app/build/web -type f -size +50M -exec echo "‚ö†Ô∏è Warning: Large file found: {}" \;
          
          # Scan for potential security issues in built files
          echo "üîí Scanning for potential security issues..."
          
          # Check for exposed secrets or API keys (basic patterns)
          if grep -r -i "api[_-]key\|secret\|password\|token" flutter_app/build/web/ --include="*.js" --include="*.html" | grep -v "flutter" | head -5; then
            echo "‚ö†Ô∏è Warning: Potential secrets found in build files. Please review."
          fi
          
          echo "‚úÖ Asset validation completed"

      - name: Sync assets to S3 with security headers
        env:
          S3_BUCKET: ${{ needs.deploy-infrastructure.outputs.s3-bucket-name }}
        run: |
          echo "üì§ Uploading assets to S3 bucket: $S3_BUCKET"
          
          # Validate bucket name format for security
          if ! echo "$S3_BUCKET" | grep -E '^[a-z0-9][a-z0-9-]*[a-z0-9]$'; then
            echo "‚ùå Error: Invalid S3 bucket name format"
            exit 1
          fi
          
          # Upload static assets with long cache and security headers
          aws s3 sync flutter_app/build/web/ s3://$S3_BUCKET/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --metadata-directive REPLACE \
            --metadata "security-scan=passed,upload-time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --exclude "*.html" \
            --exclude "*.json" \
            --exclude "manifest.json" \
            --exclude "flutter_service_worker.js" \
            --exclude "*.map" \
            --storage-class STANDARD
            
          # Upload HTML files with no-cache headers and security metadata
          aws s3 sync flutter_app/build/web/ s3://$S3_BUCKET/ \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE \
            --metadata "content-type=text/html,security-headers=enabled" \
            --include "*.html" \
            --storage-class STANDARD
            
          # Upload manifest and service worker with short cache
          aws s3 sync flutter_app/build/web/ s3://$S3_BUCKET/ \
            --cache-control "public, max-age=300" \
            --metadata-directive REPLACE \
            --metadata "content-type=application/json" \
            --include "manifest.json" \
            --include "flutter_service_worker.js" \
            --storage-class STANDARD
          
          # Verify upload integrity
          echo "üîç Verifying upload integrity..."
          UPLOADED_COUNT=$(aws s3 ls s3://$S3_BUCKET/ --recursive | wc -l)
          LOCAL_COUNT=$(find flutter_app/build/web -type f | wc -l)
          
          echo "Local files: $LOCAL_COUNT, Uploaded files: $UPLOADED_COUNT"
          
          if [ "$UPLOADED_COUNT" -lt "$LOCAL_COUNT" ]; then
            echo "‚ö†Ô∏è Warning: Upload count mismatch. Some files may not have been uploaded."
          fi
          
          echo "‚úÖ Assets uploaded successfully with security headers"

      - name: Invalidate CloudFront cache
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ needs.deploy-infrastructure.outputs.cloudfront-distribution-id }}
        run: |
          echo "üîÑ Invalidating CloudFront cache..."
          
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
            
          echo "Invalidation ID: $INVALIDATION_ID"
          
          echo "‚è≥ Waiting for invalidation to complete..."
          aws cloudfront wait invalidation-completed \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --id $INVALIDATION_ID
            
          echo "‚úÖ CloudFront cache invalidated successfully"

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-flutter, deploy-infrastructure, deploy-assets]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.build-flutter.result }}" == "success" && "${{ needs.deploy-infrastructure.result }}" == "success" && "${{ needs.deploy-assets.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=üéâ Deployment completed successfully!" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.build-flutter.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Flutter build failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy-infrastructure.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Infrastructure deployment failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy-assets.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Asset deployment failed" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Deployment failed with unknown error" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment summary
        run: |
          echo "# üöÄ Web Hosting Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Flutter Build | ${{ needs.build-flutter.result == 'success' && '‚úÖ Success' || needs.build-flutter.result == 'failure' && '‚ùå Failed' || needs.build-flutter.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚è∏Ô∏è Cancelled' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Deploy | ${{ needs.deploy-infrastructure.result == 'success' && '‚úÖ Success' || needs.deploy-infrastructure.result == 'failure' && '‚ùå Failed' || '‚è∏Ô∏è Cancelled' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Asset Deploy | ${{ needs.deploy-assets.result == 'success' && '‚úÖ Success' || needs.deploy-assets.result == 'failure' && '‚ùå Failed' || needs.deploy-assets.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚è∏Ô∏è Cancelled' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.status.outputs.status }}" == "success" ]]; then
            echo "## ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your Flutter web application has been successfully deployed!" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.deploy-infrastructure.outputs.cloudfront-domain }}" != "" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**üåê Application URL:** https://${{ needs.deploy-infrastructure.outputs.cloudfront-domain }}" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "${{ secrets.DOMAIN_NAME }}" != "" ]]; then
              echo "**üîó Custom Domain:** https://${{ secrets.DOMAIN_NAME }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the job logs for detailed error information." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.status.outputs.status }}';
            const message = '${{ steps.status.outputs.message }}';
            const environment = '${{ inputs.environment || 'dev' }}';
            const cloudfrontDomain = '${{ needs.deploy-infrastructure.outputs.cloudfront-domain }}';
            const customDomain = '${{ secrets.DOMAIN_NAME }}';
            
            let comment = `## üöÄ Web Hosting Deployment ${status === 'success' ? 'Successful' : 'Failed'}\n\n`;
            comment += `**Environment:** ${environment}\n`;
            comment += `**Status:** ${message}\n\n`;
            
            if (status === 'success') {
              if (cloudfrontDomain) {
                comment += `**üåê Preview URL:** https://${cloudfrontDomain}\n`;
              }
              if (customDomain) {
                comment += `**üîó Custom Domain:** https://${customDomain}\n`;
              }
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });